#!/usr/bin/env node
/* eslint-env node */
const program = require('commander');
const assert = require('assert');
const RJSON = require('../dist');

const data = [];

program
    .option('-u, --unpack', 'Unpack RJSON data (default is pack).')
    .option('-t, --test', 'Check that restored data is equal to original data.')
    .option('-e, --encoding', 'Encoding [utf8]', 'utf8')
    .option('-v, --verbose', 'Output debug info to stderr.')
    .option('-d, --dry_run', 'Don\'t output packed/unpacked data.')
    .on('--help', () => {
      console.log('  Read JSON/RJSON from stdin and output RJSON/JSON to stdout.');
    })
    .parse(process.argv);

process.stdin.resume();

process.stdin.on('data', (chunk) => {
  data.push(chunk);
});

process.stdin.on('end', () => {
  if (!data.length) return;
  const start = +new Date();
  const input = new Buffer.concat(data).toString(program.encoding);
  const parsed = JSON.parse(input);
  let rjsonTime = +new Date();
  const res = RJSON[program.unpack ? 'unpack' : 'pack'](parsed);
  rjsonTime = +new Date() - rjsonTime;
  const output = JSON.stringify(res);
  if (!program.dry_run) process.stdout.write(output);
  if (program.verbose) {
    console.error('In: %d, Out: %d, In/Out=%d%, Time: %dms (RJSON: %dms).',
                      input.length, output.length,
                      Math.round(100 * (input.length / (output.length || 1))),
                      (+new Date() - start), rjsonTime);
  }
  if (program.test) {
    assert.deepEqual(parsed,
                         RJSON[program.unpack ? 'pack' : 'unpack'](
                             JSON.parse(output)));
  }
});
